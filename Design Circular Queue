class MyCircularQueue {
    List<Integer> hs;
    int lin;

    public MyCircularQueue(int k) {
        lin = k;
        hs = new ArrayList<>(k);
    }
    
    public boolean enQueue(int value) {
        if(this.isFull()) return false;
        hs.add(value);
        return true;
    }
    
    public boolean deQueue() {
        if(this.isEmpty()) return false;
        hs.remove(0);
        return true;
    }
    
    public int Front() {
        if(this.isEmpty()) return -1;
        return hs.get(0);
    }
    
    public int Rear() {
       if(this.isEmpty()) return -1;
       return hs.get(hs.size()-1); 
    }
    
    public boolean isEmpty() {
        return hs.size() == 0;
    }
    
    public boolean isFull() {
        return hs.size() == lin;
    }
}

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue obj = new MyCircularQueue(k);
 * boolean param_1 = obj.enQueue(value);
 * boolean param_2 = obj.deQueue();
 * int param_3 = obj.Front();
 * int param_4 = obj.Rear();
 * boolean param_5 = obj.isEmpty();
 * boolean param_6 = obj.isFull();
 */
