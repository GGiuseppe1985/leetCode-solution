class Solution {
    public int[] sortArray(int[] nums) {
        sort(nums,0,nums.length-1);
        return nums;
    }
    public static void sort(int[] numList, int left, int right) {
    if (left < right) {
      int middle = (left + right) / 2;

      sort(numList, left, middle);
      sort(numList, middle + 1, right);

      merge(numList, left, middle, right);
    }
  }

  public static void merge(int[] numList, int left, int middle, int right) {
    // create temporary arrays
    int[] leftList = new int[middle - left + 1];
    int[] rightList = new int[right - middle];

    // copy numList into the temporary arrays
    for (int index = 0; index < leftList.length; index++) {
      leftList[index] = numList[left + index];
    }

    for (int index = 0; index < rightList.length; index++) {
      rightList[index] = numList[middle + index + 1];
    }

    // current indexes of temporary arrays
    int leftIndex = 0;
    int rightIndex = 0;

    // copy from leftList and rightList back into numList
    for (int index = left; index <= right; index++) {
      
      if (leftIndex < leftList.length && rightIndex < rightList.length) {
        if (leftList[leftIndex] < rightList[rightIndex]) {
          numList[index] = leftList[leftIndex++];
          
        }
        else {
          numList[index] = rightList[rightIndex];
          rightIndex++;
        }
      }
      else if (leftIndex < leftList.length) {
        
        numList[index] = leftList[leftIndex++];
        
      }
      else if (rightIndex < rightList.length) {
        
        numList[index] = rightList[rightIndex];
        rightIndex++;
      }
    }
  }
}
