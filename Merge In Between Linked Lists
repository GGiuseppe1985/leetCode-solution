/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeInBetween(ListNode list1, int a, int b, ListNode list2) {
        if (list1 == null || list2 == null) {
            return null; 
        }

        ListNode prev = null, end = list1, curr = list1;
        for (int i = 0; i < a && curr != null; i++) {
            prev = curr;
            curr = curr.next;
        }

        if (prev == null) {
            return list2; 
        }

        prev.next = list2; 
        while (list2 != null && list2.next != null) {
            list2 = list2.next;
        }
        for (int i = 0; i <= b - a && curr != null; i++) {
            curr = curr.next;
        }
        if (curr != null) {
            list2.next = curr; 
        }

        return list1;
    }
}
